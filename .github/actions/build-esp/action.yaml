name: Build ESP binaries
description: Build ESP binaries

inputs:
    idf_version:
        description: 'ESP-IDF version to use'
        required: false
        default: 'v5.5.1'
    idf_target:
        description: 'ESP-IDF target to use (esp32, esp32s3)'
        required: false
        default: 'esp32'

runs:
    using: 'composite'
    steps:
        - uses: pnpm/action-setup@v2
          with:
              version: latest

        - name: Install node
          uses: actions/setup-node@v4
          with:
              node-version: '20.10.0'
              cache: 'pnpm'

        - name: Install frontend dependencies and build frontend
          run: |
              pnpm i
              pnpm build
          shell: bash

        - name: Cache ccache
          uses: actions/cache@v4
          with:
              path: .ccache
              key: ccache-${{ runner.os }}-${{ inputs.idf_target }}-${{ inputs.idf_version }}-${{ hashFiles('**/CMakeLists.txt', 'sdkconfig.defaults', format('sdkconfig.defaults.{0}', inputs.idf_target), format('dependencies.lock.{0}', inputs.idf_target)) }}

        - name: Cache managed components
          uses: actions/cache@v4
          with:
              path: managed_components
              key: managed_components-${{ runner.os }}-${{ inputs.idf_target }}-${{ hashFiles(format('dependencies.lock.{0}', inputs.idf_target)) }}

        - name: esp-idf build and merge firmware
          shell: bash
          run: |
              set -euo pipefail
              IMAGE="espressif/idf:${{ inputs.idf_version }}"

              docker run --rm -t \
                -e IDF_TARGET="${{ inputs.idf_target }}" \
                -e IDF_CCACHE_ENABLE=1 \
                -e CCACHE_DIR="/app/${{ github.repository }}/.ccache" \
                -e GITHUB_ACTIONS=true \
                -v "${GITHUB_WORKSPACE}:/app/${{ github.repository }}" \
                -w "/app/${{ github.repository }}" \
                "$IMAGE" \
                bash -lc '
                  git config --global --add safe.directory "*"
                  echo "Using ccache dir: $CCACHE_DIR"
                  ccache -z || true
                  idf.py build
                  echo
                  ccache -s || true
                  cd scripts && ./merge_firmware.sh
                '
